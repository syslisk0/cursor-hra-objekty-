'use client';

import { useCallback, useEffect, useRef, useState } from 'react';
import { useLanguage } from '@/app/components/LanguageProvider';
import ScoreboardModal from '@/app/components/ScoreboardModal';
import ShopModal from '@/app/components/ShopModal';
import { onAuthStateChanged, signOut } from 'firebase/auth';
import { auth, db } from '../lib/firebase';
import { doc, onSnapshot } from 'firebase/firestore';

type CoinsState = { coins: number; uid: string | null; username?: string | null };

interface GameMenuProps {
  onStartGame: () => void;
  onStartDeveloper: (targetScore?: number) => void;
  isMuted: boolean;
  onToggleMute: () => void;
}

export default function GameMenu({ onStartGame, onStartDeveloper, isMuted, onToggleMute }: GameMenuProps) {
  const { lang, setLang, t } = useLanguage();
  const [showInfoModal, setShowInfoModal] = useState(false);
  const [showScoreboard, setShowScoreboard] = useState(false);
  const [showShop, setShowShop] = useState(false);
  const [coinsState, setCoinsState] = useState<CoinsState>({ coins: 0, uid: null, username: null });
  const [showLangMenu, setShowLangMenu] = useState(false);
  const [showBuyMenu, setShowBuyMenu] = useState(false);
  const buyMenuRef = useRef<HTMLDivElement | null>(null);

  const toggleInfoModal = useCallback(() => {
    setShowInfoModal(prev => !prev);
  }, []);

  // Close coin buy menu on outside click or ESC
  useEffect(() => {
    if (!showBuyMenu) return;
    const onDocClick = (e: MouseEvent) => {
      const t = e.target as Node | null;
      if (buyMenuRef.current && t && !buyMenuRef.current.contains(t)) {
        setShowBuyMenu(false);
      }
    };
    const onKey = (e: KeyboardEvent) => { if (e.key === 'Escape') setShowBuyMenu(false); };
    document.addEventListener('click', onDocClick);
    document.addEventListener('keydown', onKey);
    return () => { document.removeEventListener('click', onDocClick); document.removeEventListener('keydown', onKey); };
  }, [showBuyMenu]);
  const toggleScoreboard = useCallback(() => {
    setShowScoreboard(prev => !prev);
  }, []);
  const toggleShop = useCallback(() => {
    setShowShop(prev => !prev);
  }, []);

  // Live odběr mincí přihlášeného uživatele
  useEffect(() => {
    let unsubUser: (() => void) | null = null;
    const unsubAuth = onAuthStateChanged(auth, (u) => {
      if (unsubUser) { unsubUser(); unsubUser = null; }
      if (u) {
        setCoinsState(cs => ({ ...cs, uid: u.uid }));
        const ref = doc(db, 'users', u.uid);
        unsubUser = onSnapshot(ref, (snap) => {
          const data = snap.data() as any;
          const coins = typeof data?.coins === 'number' ? data.coins : 0;
          const username = typeof data?.username === 'string' ? data.username : null;
          setCoinsState({ coins, uid: u.uid, username });
        });
      } else {
        setCoinsState({ coins: 0, uid: null, username: null });
      }
    });
    return () => { if (unsubUser) unsubUser(); unsubAuth(); };
  }, []);

  return (
    <div className="w-full h-screen flex flex-col items-center justify-center bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-white p-4 text-center relative overflow-hidden">
      {/* Animated background particles */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-purple-500/10 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-500/10 rounded-full blur-3xl animate-pulse" style={{ animationDelay: '2s' }}></div>
        <div className="absolute top-1/2 left-1/2 w-60 h-60 bg-green-500/5 rounded-full blur-3xl animate-pulse" style={{ animationDelay: '4s' }}></div>
      </div>

      {/* Language + Sound controls top-right */}
      <div className="absolute top-4 right-4 z-20">
        <div className="flex items-center gap-2">
          {/* Mute toggle */}
          <button
            className="relative flex items-center justify-center w-10 h-10 bg-gray-800/70 hover:bg-gray-700/70 border border-white/10 rounded-lg cursor-pointer"
            onClick={onToggleMute}
            title={isMuted ? 'Zapnout hudbu' : 'Vypnout hudbu'}
            aria-label={isMuted ? 'Unmute music' : 'Mute music'}
          >
            <span className="text-lg">{isMuted ? '🔇' : '🔊'}</span>
          </button>

          {/* Language switcher */}
          <div className="relative">
            <button
              className="flex items-center gap-2 px-3 py-2 bg-gray-800/70 hover:bg-gray-700/70 border border-white/10 rounded-lg cursor-pointer"
              onClick={() => setShowLangMenu(prev => !prev)}
            >
              <span className="text-xl">{lang === 'cs' ? '🇨🇿' : '🇬🇧'}</span>
              <span className="text-sm text-gray-300 uppercase">{lang}</span>
            </button>
            {showLangMenu && (
              <div className="absolute right-0 mt-2 w-32 bg-gray-800 border border-white/10 rounded-lg shadow-lg">
                <button
                  className="w-full flex items-center gap-2 px-3 py-2 hover:bg-gray-700 text-left cursor-pointer"
                  onClick={() => { setLang('cs'); setShowLangMenu(false); }}
                >
                  <span>🇨🇿</span>
                  <span>Čeština</span>
                </button>
                <button
                  className="w-full flex items-center gap-2 px-3 py-2 hover:bg-gray-700 text-left cursor-pointer"
                  onClick={() => { setLang('en'); setShowLangMenu(false); }}
                >
                  <span>🇬🇧</span>
                  <span>English</span>
                </button>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="relative z-10 w-full max-w-4xl">
        {/* Title section */}
        <div className="mb-12">
          <h1 className="text-4xl sm:text-6xl lg:text-7xl font-bold mb-4 bg-gradient-to-r from-blue-400 via-purple-500 to-pink-500 bg-clip-text text-transparent">
            {t('menu.title')}
          </h1>
          <div className="mb-4">
            <span className="inline-block rounded-full p-[2px] bg-gradient-to-r from-pink-500 via-purple-500 to-blue-500 shadow-[0_0_24px_rgba(168,85,247,0.35)]">
              <span className="inline-flex items-center gap-1 px-3 py-1 text-xs font-bold tracking-wider uppercase rounded-full bg-gray-900/60 text-white ring-1 ring-white/10 backdrop-blur-sm animate-pulse">
                ✦ ALPHA ✦
              </span>
            </span>
          </div>
          <p className="text-lg sm:text-xl text-gray-300 mb-6">
            {t('menu.subtitle')}
          </p>
          
          {/* User info section */}
          <div className="flex items-center justify-center gap-6 mb-8">
            <div className="relative flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-yellow-500/20 to-orange-500/20 rounded-lg border border-yellow-500/30">
              <span className="text-2xl">💰</span>
              <span className="text-xl font-bold text-yellow-400">{coinsState.coins?.toLocaleString() || 0}</span>
              <button
                type="button"
                onClick={(e) => { e.stopPropagation(); setShowBuyMenu(v => !v); }}
                className="ml-2 w-7 h-7 rounded-md bg-yellow-500/20 hover:bg-yellow-500/30 border border-yellow-400/40 text-yellow-300 flex items-center justify-center text-base font-bold transition-colors cursor-pointer"
                title="Koupit coiny"
                aria-label="Koupit coiny"
              >
                +
              </button>

              {showBuyMenu && (
                <div className="fixed inset-0 z-[60] flex items-center justify-center">
                  <div className="absolute inset-0 bg-black/60 backdrop-blur-sm" onClick={() => setShowBuyMenu(false)} />
                  <div
                    ref={buyMenuRef}
                    onClick={(e) => e.stopPropagation()}
                    className="relative z-[61] w-[92vw] max-w-2xl bg-gray-900/95 border border-white/10 rounded-2xl shadow-2xl p-6"
                  >
                    <div className="flex items-center justify-between mb-4">
                      <div className="text-lg font-bold text-white">Koupit coiny</div>
                      <button
                        onClick={() => setShowBuyMenu(false)}
                        className="px-3 py-1 rounded-md bg-gray-800/70 hover:bg-gray-700/70 border border-white/10 text-white cursor-pointer"
                      >
                        ✕
                      </button>
                    </div>
                    <div className="text-sm text-gray-300 mb-4">Vyber balíček coinů</div>
                    <div className="grid grid-cols-2 gap-4">
                      <button
                        onClick={() => { alert('Nákup 50 coinů bude brzy dostupný.'); setShowBuyMenu(false); }}
                        className="group flex items-center gap-4 p-4 rounded-xl bg-gray-800/60 hover:bg-gray-700/60 border border-white/10 hover:border-white/20 transition cursor-pointer"
                      >
                        <div className="relative w-14 h-14 rounded-xl bg-yellow-500/10 border border-yellow-500/25">
                          <svg className="absolute" width="18" height="18" viewBox="0 0 20 20" style={{ left: '18px', top: '16px' }}>
                            <circle cx="10" cy="10" r="8" fill="#FACC15" stroke="#D97706" strokeWidth="2" />
                          </svg>
                          <svg className="absolute opacity-90" width="16" height="16" viewBox="0 0 20 20" style={{ left: '8px', top: '22px' }}>
                            <circle cx="10" cy="10" r="7" fill="#FCD34D" stroke="#B45309" strokeWidth="2" />
                          </svg>
                          <svg className="absolute opacity-75" width="14" height="14" viewBox="0 0 20 20" style={{ left: '26px', top: '6px' }}>
                            <circle cx="10" cy="10" r="6" fill="#FDE68A" stroke="#B45309" strokeWidth="2" />
                          </svg>
                        </div>
                        <div className="text-left">
                          <div className="text-white font-bold text-lg">50</div>
                          <div className="text-xs text-gray-400">Malý balíček</div>
                        </div>
                      </button>
                      <button
                        onClick={() => { alert('Nákup 100 coinů bude brzy dostupný.'); setShowBuyMenu(false); }}
                        className="group flex items-center gap-4 p-4 rounded-xl bg-amber-900/30 hover:bg-amber-900/40 border border-amber-500/30 hover:border-amber-500/40 transition cursor-pointer"
                      >
                        <div className="relative w-14 h-14 rounded-xl bg-amber-500/20 border border-amber-500/40">
                          <svg className="absolute" width="18" height="18" viewBox="0 0 20 20" style={{ left: '6px', top: '18px' }}>
                            <circle cx="10" cy="10" r="8" fill="#FACC15" stroke="#D97706" strokeWidth="2" />
                          </svg>
                          <svg className="absolute" width="18" height="18" viewBox="0 0 20 20" style={{ left: '20px', top: '20px' }}>
                            <circle cx="10" cy="10" r="8" fill="#FCD34D" stroke="#B45309" strokeWidth="2" />
                          </svg>
                          <svg className="absolute" width="18" height="18" viewBox="0 0 20 20" style={{ left: '13px', top: '8px' }}>
                            <circle cx="10" cy="10" r="8" fill="#FDE68A" stroke="#B45309" strokeWidth="2" />
                          </svg>
                          <svg className="absolute opacity-90" width="16" height="16" viewBox="0 0 20 20" style={{ left: '2px', top: '6px' }}>
                            <circle cx="10" cy="10" r="7" fill="#FACC15" stroke="#D97706" strokeWidth="2" />
                          </svg>
                          <svg className="absolute opacity-90" width="16" height="16" viewBox="0 0 20 20" style={{ left: '26px', top: '6px' }}>
                            <circle cx="10" cy="10" r="7" fill="#FCD34D" stroke="#B45309" strokeWidth="2" />
                          </svg>
                          <svg className="absolute opacity-80" width="14" height="14" viewBox="0 0 20 20" style={{ left: '18px', top: '2px' }}>
                            <circle cx="10" cy="10" r="6" fill="#FDE68A" stroke="#B45309" strokeWidth="2" />
                          </svg>
                          <span className="absolute -top-1 -right-1 text-[10px] px-1 py-[2px] rounded bg-amber-500 text-black font-extrabold border border-amber-300">x2</span>
                        </div>
                        <div className="text-left">
                          <div className="text-white font-bold text-lg">100</div>
                          <div className="text-xs text-gray-400">Balíček</div>
                        </div>
                      </button>
                      <button
                        onClick={() => { alert('Nákup 500 coinů bude brzy dostupný.'); setShowBuyMenu(false); }}
                        className="group flex items-center gap-4 p-4 rounded-xl bg-gray-800/60 hover:bg-gray-700/60 border border-white/10 hover:border-white/20 transition cursor-pointer"
                      >
                        <div className="w-14 h-14 rounded-xl flex items-center justify-center text-3xl bg-yellow-500/20 border border-yellow-500/30">💰</div>
                        <div className="text-left">
                          <div className="text-white font-bold text-lg">500</div>
                          <div className="text-xs text-gray-400">Velký balíček</div>
                        </div>
                      </button>
                      <button
                        onClick={() => { alert('Nákup 1000 coinů bude brzy dostupný.'); setShowBuyMenu(false); }}
                        className="group flex items-center gap-4 p-4 rounded-xl bg-gray-800/60 hover:bg-gray-700/60 border border-white/10 hover:border-white/20 transition cursor-pointer"
                      >
                        <div className="w-14 h-14 rounded-xl flex items-center justify-center text-3xl bg-yellow-500/20 border border-yellow-500/30">🏦</div>
                        <div className="text-left">
                          <div className="text-white font-bold text-lg">1000</div>
                          <div className="text-xs text-gray-400">Mega balík</div>
                        </div>
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
            <span className="text-sm text-gray-300">{t('menu.coins')}</span>
            {coinsState.username && (
              <div className="flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-lg border border-blue-500/30">
                <span className="text-xl">👤</span>
                <span className="text-lg font-semibold text-blue-300">{coinsState.username}</span>
              </div>
            )}
          </div>
        </div>

        {/* Main action buttons */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8 max-w-4xl mx-auto">
          <button
            onClick={onStartGame}
            className="group relative overflow-hidden px-6 py-6 bg-gradient-to-br from-green-500 to-emerald-600 hover:from-green-400 hover:to-emerald-500 rounded-xl text-xl font-bold transition-all duration-300 transform hover:scale-105 hover:shadow-2xl hover:shadow-green-500/25 cursor-pointer"
          >
            <div className="absolute inset-0 bg-gradient-to-br from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            <div className="relative flex flex-col items-center gap-2">
              <span className="text-3xl">🎮</span>
              <span>{t('menu.play')}</span>
            </div>
          </button>

          <button
            onClick={toggleInfoModal}
            className="group relative overflow-hidden px-6 py-6 bg-gradient-to-br from-blue-500 to-blue-600 hover:from-blue-400 hover:to-blue-500 rounded-xl text-xl font-bold transition-all duration-300 transform hover:scale-105 hover:shadow-2xl hover:shadow-blue-500/25 cursor-pointer"
          >
            <div className="absolute inset-0 bg-gradient-to-br from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            <div className="relative flex flex-col items-center gap-2">
              <span className="text-3xl">ℹ️</span>
              <span>{t('menu.info')}</span>
            </div>
          </button>

          <button
            onClick={toggleScoreboard}
            className="group relative overflow-hidden px-6 py-6 bg-gradient-to-br from-purple-500 to-purple-600 hover:from-purple-400 hover:to-purple-500 rounded-xl text-xl font-bold transition-all duration-300 transform hover:scale-105 hover:shadow-2xl hover:shadow-purple-500/25 cursor-pointer"
          >
            <div className="absolute inset-0 bg-gradient-to-br from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            <div className="relative flex flex-col items-center gap-2">
              <span className="text-3xl">🏆</span>
              <span>{t('menu.scoreboard')}</span>
            </div>
          </button>

          <button
            onClick={toggleShop}
            className="group relative overflow-hidden px-6 py-6 bg-gradient-to-br from-yellow-500 to-orange-500 hover:from-yellow-400 hover:to-orange-400 rounded-xl text-xl font-bold transition-all duration-300 transform hover:scale-105 hover:shadow-2xl hover:shadow-yellow-500/25 cursor-pointer"
          >
            <div className="absolute inset-0 bg-gradient-to-br from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            <div className="relative flex flex-col items-center gap-2">
              <span className="text-3xl">🛒</span>
              <span>{t('menu.shop')}</span>
            </div>
          </button>
        </div>

        {/* Footer section */}
        <div className="flex flex-col items-center gap-4">
          <div className="flex items-center gap-4">
            <p className="text-lg text-gray-400">{t('made by syslisk0')}</p>
            
            {coinsState.uid && (
              <button
                onClick={() => signOut(auth)}
                className="px-4 py-2 bg-gray-700/50 hover:bg-gray-600/50 rounded-lg border border-white/10 hover:border-white/20 transition-all duration-200 text-sm cursor-pointer"
              >
                🚪 {t('menu.logout')}
              </button>
            )}
          </div>
        </div>
      </div>

      {showInfoModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/70 p-4">
          <div className="bg-gray-800 p-6 sm:p-8 rounded-lg shadow-xl max-w-xl w-full text-left overflow-y-auto max-h-[90vh]">
            <h2 className="text-2xl sm:text-3xl font-bold mb-6 text-white">{t('menu.infoTitle')}</h2>
            <p className="text-base sm:text-lg mb-4 text-gray-300">{t('menu.infoP1')}</p>
            <p className="text-base sm:text-lg mb-6 text-gray-300">{t('menu.infoP2')}</p>

            <div className="space-y-5">
              <section>
                <h3 className="text-xl font-semibold text-white mb-2">{t('menu.info.controlsTitle')}</h3>
                <p className="text-gray-300">{t('menu.info.controlsBody')}</p>
              </section>

              <section>
                <h3 className="text-xl font-semibold text-white mb-2">{t('menu.info.scoringTitle')}</h3>
                <p className="text-gray-300">{t('menu.info.scoringBody')}</p>
                <p className="text-green-300 font-semibold mt-2">{t('menu.rewards')}</p>
              </section>

              <section>
                <h3 className="text-xl font-semibold text-white mb-2">{t('menu.info.abilitiesTitle')}</h3>
                <p className="text-gray-300">{t('menu.info.abilitiesBody')}</p>
              </section>

              {/* Pre-Game Store info */}
              <section>
                <h3 className="text-xl font-semibold text-white mb-2">Pre-Game Store</h3>
                {lang === 'cs' ? (
                  <div className="text-gray-300 space-y-2">
                    <p>Po stisku <strong>Play</strong> se nad herním pozadím otevře obchod pro tuto hru. Během otevření je hra pozastavená.</p>
                    <ul className="list-disc list-inside space-y-1">
                      <li><strong>Extra srdce</strong>: +1 startovní srdce za <strong>50</strong> coinů (bez limitu).</li>
                      <li><strong>Větší šance na spawnutí itemů</strong>: +5% šance na spawnutí itemů (srdce/bomba/přesýpací hodiny) za <strong>50</strong> coinů za nákup (bez limitu).</li>
                    </ul>
                  </div>
                ) : (
                  <div className="text-gray-300 space-y-2">
                    <p>After pressing <strong>Play</strong>, a store opens over the game background. The game is paused while it’s open.</p>
                    <ul className="list-disc list-inside space-y-1">
                      <li><strong>Extra heart</strong>: +1 starting heart for <strong>50</strong> coins (no limit).</li>
                      <li><strong>Increased item spawn chance</strong>: +5% item spawn chance (heart/bomb/hourglass) per purchase for <strong>50</strong> coins (no limit).</li>
                    </ul>
                  </div>
                )}
              </section>

              <section>
                <h3 className="text-xl font-semibold text-white mb-2">{t('menu.info.collectiblesTitle')}</h3>
                <ul className="list-disc list-inside space-y-1 text-gray-300">
                  <li>{t('menu.info.collectibles.bomb')}</li>
                  <li>{t('menu.info.collectibles.heart')}</li>
                  <li>{t('menu.info.collectibles.hourglass')}</li>
                </ul>
              </section>

              <section>
                <h3 className="text-xl font-semibold text-white mb-2">{t('menu.info.levelsTitle')}</h3>
                <p className="text-gray-300">{t('menu.info.levelsBody')}</p>
              </section>

              <section>
                <h3 className="text-xl font-semibold text-white mb-2">{t('menu.info.bossTitle')}</h3>
                <p className="text-gray-300">{t('menu.info.bossBody')}</p>
              </section>

              <section>
                <h3 className="text-xl font-semibold text-white mb-2">{t('menu.info.tipsTitle')}</h3>
                <p className="text-gray-300">{t('menu.info.tipsBody')}</p>
              </section>
            </div>

            <button
              onClick={toggleInfoModal}
              className="mt-6 px-6 py-3 bg-red-500 rounded-lg hover:bg-red-600 text-lg sm:text-xl font-semibold transition-colors cursor-pointer w-full"
            >
              {t('menu.close')}
            </button>
          </div>
        </div>
      )}

      {showScoreboard && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/70 p-4">
          <div className="bg-gray-800 p-6 sm:p-8 rounded-lg shadow-xl w-[92vw] max-w-7xl max-h-[90vh] overflow-y-auto">
            <ScoreboardModal onClose={toggleScoreboard} />
          </div>
        </div>
      )}

      {showShop && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/70 p-4">
          <div className="bg-gray-800 p-6 sm:p-8 rounded-lg shadow-xl w-[92vw] max-w-7xl max-h-[90vh] overflow-y-auto">
            <ShopModal onClose={toggleShop} />
          </div>
        </div>
      )}
      {/* Developer button bottom-right */}
      <button
        onClick={() => {
          const pwd = typeof window !== 'undefined' ? window.prompt('Zadej developerské heslo:') : null;
          if (pwd === 'b14b82b83b43') {
            const val = window.prompt('Zadej cílové skóre (číslo):');
            const parsed = val != null ? parseInt(val, 10) : NaN;
            const target = Number.isFinite(parsed) && parsed >= 0 ? parsed : undefined;
            onStartDeveloper(target);
          }
        }}
        className="absolute bottom-3 right-3 bg-gray-700 hover:bg-gray-600 text-white text-xs px-3 py-2 rounded-lg"
        title="Developer"
      >
        Developer
      </button>
    </div>
  );
}
